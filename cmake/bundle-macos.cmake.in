set(PROJECT_NAME "@PROJECT_NAME@")  # bundle path
set(CMAKE_PREFIX_PATH "@CMAKE_PREFIX_PATH@")  # library lookup
set(CMAKE_INSTALL_LIBDIR "@CMAKE_INSTALL_LIBDIR@")  # library paths
set(CMAKE_INSTALL_DATADIR "@CMAKE_INSTALL_DATADIR@")
set(CMAKE_SOURCE_DIR "@CMAKE_SOURCE_DIR@")  # qml lib lookup dir for macdeployqt
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "@CMAKE_LIBRARY_OUTPUT_DIRECTORY@")
set(BUNDLE_PATH "${CMAKE_INSTALL_PREFIX}/${PROJECT_NAME}.app")



# PRINT CMAKE ENV

message(STATUS "--- ENV ---")
get_cmake_property(_variableNames VARIABLES)
list (SORT _variableNames)
foreach (_variableName ${_variableNames})
    message(STATUS "${_variableName}=${${_variableName}}")
endforeach()
message(STATUS "--- ENV END ---")




# MOVE FILES INTO BUNDLE


## Library
file(MAKE_DIRECTORY "${BUNDLE_PATH}/Contents/Frameworks")
file(RENAME
    "${CMAKE_INSTALL_PREFIX}/albert.framework"
    "${BUNDLE_PATH}/Contents/Frameworks/albert.framework"
)

## Plugins
file(MAKE_DIRECTORY "${BUNDLE_PATH}/Contents/PlugIns")
file(RENAME
    ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}/albert
    ${BUNDLE_PATH}/Contents/PlugIns/albert
)

## Resources
set(RES_SRC ${CMAKE_INSTALL_PREFIX}/share/albert)
file(GLOB children RELATIVE ${RES_SRC} ${RES_SRC}/*)
foreach(child ${children})
    file(RENAME
        ${RES_SRC}/${child}
        ${BUNDLE_PATH}/Contents/Resources/${child}
    )
endforeach()

file(REMOVE_RECURSE "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}")
file(REMOVE_RECURSE "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}")



# ADD RPATHS TO EXECUTABLE

execute_process(
    COMMAND install_name_tool
        -add_rpath "@executable_path/../Frameworks/"  # in bundle
        -add_rpath "/opt/local/lib/"                  # RPATH macports
        -add_rpath "/opt/homebrew/lib/"               # RPATH homebrew arm
        -add_rpath "/usr/local/lib/"                  # RPATH homebrew intel
        "${BUNDLE_PATH}/Contents/MacOS/${PROJECT_NAME}"
    COMMAND_ECHO STDOUT
    COMMAND_ERROR_IS_FATAL ANY
)



# DEPLOY (APPROACH #1, use qt_deploy_runtime_dependencies)

# set(QT_DEPLOY_SUPPORT "@QT_DEPLOY_SUPPORT@")
# message(STATUS "QT_DEPLOY_SUPPORT ${QT_DEPLOY_SUPPORT}")
# include("${QT_DEPLOY_SUPPORT}")

# ## Get a list of plugin files
# # file(GLOB PLUGINS "${BUNDLE_PATH}/Contents/MacOS/plugins/*")
# # message(STATUS PLUGINS: ${PLUGINS})

# qt_deploy_runtime_dependencies(
#     EXECUTABLE ${BUNDLE_PATH}
#     # ADDITIONAL_EXECUTABLES ${PLUGINS}
#     GENERATE_QT_CONF
#     VERBOSE
# )



# DEPLOY (APPROACH #2, call macdeployqt)

# find_program(MACDEPLOYQT NAMES macdeployqt macdeployqt REQUIRED)
# get_filename_component(QT_BIN_DIR "${MACDEPLOYQT}" DIRECTORY)
# get_filename_component(QT_DIR "${QT_BIN_DIR}" DIRECTORY)
# set(QT_LIB_DIR "${QT_DIR}/${CMAKE_INSTALL_LIBDIR}")

# # Build list of -executable= parameters for plugins consumed by macdeployqt
# FILE(GLOB PLUGINS "${BUNDLE_PATH}/Contents/PlugIns/albert/*")
# foreach(PLUGIN ${PLUGINS})
#     list(APPEND PLUGINS_EXEC_PARAMS "-executable=${PLUGIN}")
# endforeach()

# message(STATUS "MACDEPLOYQT ${MACDEPLOYQT}")
# message(STATUS "QT_DIR ${QT_DIR}")
# message(STATUS "QT_BIN_DIR ${QT_BIN_DIR}")
# message(STATUS "QT_LIB_DIR ${QT_LIB_DIR}")

# execute_process(
#     COMMAND "${MACDEPLOYQT}"
#     "${BUNDLE_PATH}"
#     "-executable=${BUNDLE_PATH}/Contents/Frameworks/albert.framework/Versions/A/albert"
#     ${PLUGINS_EXEC_PARAMS}
#     #"-libpath=${CMAKE_INSTALL_PREFIX}"  # albert lib
#     #"-libpath=${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}"  # albert lib
#     #"-libpath=${CMAKE_LIBRARY_OUTPUT_DIRECTORY}"  # albert lib
#     "-libpath=/opt/local/lib"  # macports dependencies
#     #"-qmldir=${CMAKE_SOURCE_DIR}/plugins/qmlboxmodel/resources/qml"
#     "-appstore-compliant"
#     "-verbose=1"
#     #"-dmg"
#     COMMAND_ECHO STDOUT
#     COMMAND_ERROR_IS_FATAL ANY
# )



# CODE SIGN

# execute_process(
#     COMMAND xattr -d com.apple.quarantine "${BUNDLE_PATH}"
#     COMMAND_ECHO STDOUT
#     COMMAND_ERROR_IS_FATAL ANY
# )
execute_process(
    COMMAND codesign --force --deep --sign - "${BUNDLE_PATH}"
    COMMAND_ECHO STDOUT
    COMMAND_ERROR_IS_FATAL ANY
)



## CLEANUP

# include(BundleUtilities)
# verify_app("${BUNDLE_PATH}")


# Older, possibly useful stuff

## Build library lookup paths from CMAKE_PREFIX_PATH
#foreach(PATH ${CMAKE_PREFIX_PATH})
#    list(APPEND DIRS "${PATH}/lib")
#endforeach()
#list(APPEND DIRS "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}") # albert lib
#list(APPEND DIRS "/Library/Developer/CommandLineTools/Library/Frameworks/") # system python




#include(BundleUtilities)
#fixup_bundle("${BUNDLE_PATH}" "${LIBS}" "${DIRS}")








